<div class="container">
  <footer class="d-flex flex-wrap justify-content-between align-items-center py-3 my-4 border-top">
    <div class="col-md-4 d-flex align-items-center">
      <a href="/" class="mb-3 me-2 mb-md-0 text-body-secondary text-decoration-none lh-1">
        <svg class="bi" width="30" height="24">
          <use xlink:href="#bootstrap"></use>
        </svg>
      </a>
      <span class="mb-3 mb-md-0 text-body-secondary">Â© 2024 Peng Yu</span>
    </div>

    <ul class="nav col-md-4 justify-content-end list-unstyled d-flex">
      <li class="ms-3"><a class="text-body-secondary" href="#"><svg class="bi" width="24" height="24">
            <use xlink:href="#twitter"></use>
          </svg></a></li>
      <li class="ms-3"><a class="text-body-secondary" href="#"><svg class="bi" width="24" height="24">
            <use xlink:href="#instagram"></use>
          </svg></a></li>
      <li class="ms-3"><a class="text-body-secondary" href="#"><svg class="bi" width="24" height="24">
            <use xlink:href="#facebook"></use>
          </svg></a></li>
    </ul>
  </footer>
  <div class="position-fixed bottom-0 start-0 p-3" style="z-index: 11">
    <div id="liveToast" class="toast hide" role="alert" aria-live="assertive" aria-atomic="true">
      <div class="toast-header">
        <strong class="me-auto">Notification</strong>
        <small>just now</small>
        <button type="button" class="btn-close" data-bs-dismiss="toast" aria-label="Close"></button>
      </div>
      <div id="toast-body" class="toast-body">
      </div>
    </div>
  </div>
</div>

<script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/js/bootstrap.bundle.min.js"
  integrity="sha384-YvpcrYf0tY3lHB60NNkmXc5s9fDVZLESaAA55NDzOxhy9GkcIdslK1eN7N6jIeHz" crossorigin="anonymous"></script>
<script src="https://code.jquery.com/jquery-3.7.1.min.js"
  integrity="sha256-/JqT3SQfawRcv/BIHPThkBvs0OEvtFFmqPF/lYI/Cxo=" crossorigin="anonymous"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/web3/4.7.0/web3.min.js"
  integrity="sha512-Fb4046VCVYeHkcOot1tILxjEvhotfjmk2Zo54zEJopE4BskdPALUvjzjnOttxbZ/WlvKUOgCHTHy42Z5OxRaHw=="
  crossorigin="anonymous" referrerpolicy="no-referrer"></script>
<script>


  // Convert BitInt to string
  BigInt.prototype.toJSON = function () { return this.toString() }

  // Global Constants
  var PROJECTS = "projects";
  var ACCOUNT = "account";
  var ACCOUNTS = "accounts"

  //Initialize Notification
  const toastLiveExample = document.getElementById('liveToast');
  const toastBootstrap = bootstrap.Toast.getOrCreateInstance(toastLiveExample);


  // Use API to get ETH Price
  var ethPrice;
  const getEthPrice = async () => {
    const data = await $.get("https://api.blockchain.com/v3/exchange/tickers/ETH-EUR");
    ethPrice = data.price_24h;
  }

  // Connect to wallet function
  $("#connectBtn").click(async () => {
    if (window.ethereum) {
      const accounts = await ethereum.request({ method: "eth_requestAccounts" });
      sessionStorage.setItem(ACCOUNTS, JSON.stringify(accounts));
      sessionStorage.setItem(ACCOUNT, accounts[0]);
      $("#activeAccount").text(accounts[0].substring(accounts[0].length - 3).toUpperCase());
      
      // Display accounts
      for(i=0; i<accounts.length; i++) {
        $("#wallet").append(`<li><a role="button" onclick="switchAccount('${accounts[i]}')" class="dropdown-item" href="#">${accounts[i]}</a></li>`)
      }
      $("#connectBtn").hide();
      // $("#wallet").html(`User Account: ${accounts[0]}`);
      $("#avatar").show();
    } else {
      $("#toast-body").html("Please install a wallet extention. We recommend MetaMask.");
      toastBootstrap.show();
    }
  })

  // Switch Account
  const switchAccount = (account) => {
    sessionStorage.setItem(ACCOUNT, account);
    $("#activeAccount").text(account.substring(account.length - 3).toUpperCase());
  }
  // Connect to contract
  const connectContract = async () => {
    // Smart contract ABI and Address
    const ABI = [
	{
		"inputs": [
			{
				"internalType": "string",
				"name": "_title",
				"type": "string"
			},
			{
				"internalType": "string",
				"name": "_description",
				"type": "string"
			},
			{
				"internalType": "uint256",
				"name": "_target",
				"type": "uint256"
			},
			{
				"internalType": "uint256",
				"name": "_deadline",
				"type": "uint256"
			},
			{
				"internalType": "string",
				"name": "_image",
				"type": "string"
			}
		],
		"name": "create",
		"outputs": [
			{
				"internalType": "uint256",
				"name": "",
				"type": "uint256"
			}
		],
		"stateMutability": "nonpayable",
		"type": "function"
	},
	{
		"inputs": [
			{
				"internalType": "uint256",
				"name": "_id",
				"type": "uint256"
			}
		],
		"name": "donate",
		"outputs": [],
		"stateMutability": "payable",
		"type": "function"
	},
	{
		"inputs": [
			{
				"internalType": "uint256",
				"name": "_id",
				"type": "uint256"
			}
		],
		"name": "getDonators",
		"outputs": [
			{
				"internalType": "address[]",
				"name": "",
				"type": "address[]"
			},
			{
				"internalType": "uint256[]",
				"name": "",
				"type": "uint256[]"
			}
		],
		"stateMutability": "view",
		"type": "function"
	},
	{
		"inputs": [],
		"name": "getProjects",
		"outputs": [
			{
				"components": [
					{
						"internalType": "address",
						"name": "owner",
						"type": "address"
					},
					{
						"internalType": "string",
						"name": "title",
						"type": "string"
					},
					{
						"internalType": "string",
						"name": "description",
						"type": "string"
					},
					{
						"internalType": "uint256",
						"name": "target",
						"type": "uint256"
					},
					{
						"internalType": "uint256",
						"name": "deadline",
						"type": "uint256"
					},
					{
						"internalType": "uint256",
						"name": "collected",
						"type": "uint256"
					},
					{
						"internalType": "string",
						"name": "image",
						"type": "string"
					},
					{
						"internalType": "address[]",
						"name": "donators",
						"type": "address[]"
					},
					{
						"internalType": "uint256[]",
						"name": "donations",
						"type": "uint256[]"
					}
				],
				"internalType": "struct CrowdFunding.Project[]",
				"name": "",
				"type": "tuple[]"
			}
		],
		"stateMutability": "view",
		"type": "function"
	},
	{
		"inputs": [],
		"name": "numberOfProjects",
		"outputs": [
			{
				"internalType": "uint256",
				"name": "",
				"type": "uint256"
			}
		],
		"stateMutability": "view",
		"type": "function"
	},
	{
		"inputs": [
			{
				"internalType": "uint256",
				"name": "",
				"type": "uint256"
			}
		],
		"name": "projects",
		"outputs": [
			{
				"internalType": "address",
				"name": "owner",
				"type": "address"
			},
			{
				"internalType": "string",
				"name": "title",
				"type": "string"
			},
			{
				"internalType": "string",
				"name": "description",
				"type": "string"
			},
			{
				"internalType": "uint256",
				"name": "target",
				"type": "uint256"
			},
			{
				"internalType": "uint256",
				"name": "deadline",
				"type": "uint256"
			},
			{
				"internalType": "uint256",
				"name": "collected",
				"type": "uint256"
			},
			{
				"internalType": "string",
				"name": "image",
				"type": "string"
			}
		],
		"stateMutability": "view",
		"type": "function"
	}
];
    const Address = '0x0865651FBfDF6228C9F4553f95778a0Cb75A8d9d';

    // If MetaMask installed
    if(window.ethereum) {
      window.web3 = await new Web3(window.ethereum);
      
    } else {
      // if a user doesn't install MetaMask, use alchemy provider
      const alchemyApiKey = 'erzlaDNMdBp4UwWxOsc6mwNAmTpPH-by';
      const alchemyHttpUrl = `https://eth-sepolia.g.alchemy.com/v2/${alchemyApiKey}`;
      window.web3 = new Web3(alchemyHttpUrl);
    }
    window.contract = await new window.web3.eth.Contract(ABI, Address);
  }

  // Scroll screen
  const scrollToAnchor = (anchorId) => {
    var anchor = document.getElementById(anchorId);
    if (anchor) {
      anchor.scrollIntoView({ behavior: 'smooth' });
    }
  }

  // Initilize
  $(async function () {
    if (sessionStorage.getItem(ACCOUNTS) && sessionStorage.getItem(ACCOUNTS) != "undefined") {
      // Display accounts
      const accounts = JSON.parse(sessionStorage.getItem(ACCOUNTS));
      for(i=0; i<accounts.length; i++) {
        const a = accounts[i]
        $("#wallet").append(`<li><a role="button" onclick="switchAccount('${a}')" class="dropdown-item" href="#">${accounts[i]}</a></li>`)
      }
      $("#activeAccount").text(sessionStorage.getItem(ACCOUNT).substring(sessionStorage.getItem(ACCOUNT).length - 3).toUpperCase());
      // $("#wallet").html(`User Account: ${sessionStorage.getItem(ACCOUNT)}`);
      $("#connectBtn").hide();
      $("#avatar").show(); 
    } else {
      $("#avatar").hide();
      $("#connectBtn").show();
    }
  })

</script>
</body>

</html>