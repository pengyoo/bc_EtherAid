<!DOCTYPE html>
<html>

<head>
	<title>PayApp 12.07</title>
	<script type="text/javascript" src="https://cdnjs.cloudflare.com/ajax/libs/web3/1.2.7-rc.0/web3.min.js"></script>
	<style>
		body {
			background-color: rgb(112, 140, 216);
			font-family: tahoma;
			font-size: 33px;
			display: flex;
			flex-direction: row;
		}

		button {
			background-color: rgb(203, 220, 223);
			font-size: 33px;
			padding: 5px;
			font-family: Impact;
		}

		input {
			width: 25vw;
			height: 30px;
			font-size: 25px;
			font-family: tahoma;
			outline: none;
		}

		#readArea {
			flex-basis: 50%;
		}

		#writeArea {
			flex-basis: 50%;
		}

		button:hover {
			background-color: rgb(255, 0, 0);
		}
	</style>
</head>

<body>

	<div id="readArea"> <!-- READING FROM CONTRACT -->
		<button onclick="connectMetamask()">CONNECT TO METAMASK</button>
		<p id="userArea">Status: Not connected to Metamask</p>
		<!-- index html to meta-->

		<button onclick="connectContract()">CONNECT TO CONTRACT</button>
		<p id="contractArea">Status: Not connected to Contract</p>
		<!-- meta to SC -->

		<button onclick="getContractAccount()"> GET CONTRACT ACCOUNT </button>
		<p id="contractAccount">Contract Account: Not Connected to Contract</p>
		<!-- CAlling the function designed in Transactions.sol get deployment addresss -->

		<button onclick="getBalanceApple()">GET BALANCE OF THE CONTRACT</button>
		<p id="balanceArea">Balance: Not Connected to Contract</p>
		<!-- CAlling the function designed in Transactions.sol get balance -->


	</div>

	<div id="writeArea"><!-- WRITING TO CONTRACT -->
		<button onclick="depositContract()">Send ether to the Contract</button><br>
		<input type="number" id="depositInput" placeholder="Enter Amount"><br> <br>
		<!-- Deposit to contract calling on deposit function -->

		<button onclick="withdraw()">WITHDRAW ETHER TO ANY ADDRESS</button> <br>
		<input type="text" id="addressInput" placeholder="Enter Address"> <br>
		<input type="number" id="amountInput" placeholder="Enter Amount">
		<!-- CAlling the function designed in Transactions.sol -->
		<!-- calling the withdraw function -->

		<button
			onclick="createProject('Test Project', 'This is a test project', 100000000000, new Date().getTime() + 1000, 'https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcSRkGpg5tGbl-KBcaYMr1dyS4kp5Cv6dsgpxjejpcvOZQ&s')">Create
			Project</button> <br>
	</div>

	<script> // the below script code is convention in web3 in forming the communication with Web

		let account;
		const connectMetamask = async () => {
			if (window.ethereum !== "undefined") {
				const accounts = await ethereum.request({ method: "eth_requestAccounts" });
				account = accounts[0];
				document.getElementById("userArea").innerHTML = `User Account: ${account}`;
			}
		}

		const connectContract = async () => {
			const ABI = [
				{
					"inputs": [
						{
							"internalType": "address",
							"name": "_owner",
							"type": "address"
						},
						{
							"internalType": "string",
							"name": "_title",
							"type": "string"
						},
						{
							"internalType": "string",
							"name": "_description",
							"type": "string"
						},
						{
							"internalType": "uint256",
							"name": "_target",
							"type": "uint256"
						},
						{
							"internalType": "uint256",
							"name": "_deadline",
							"type": "uint256"
						},
						{
							"internalType": "string",
							"name": "_image",
							"type": "string"
						}
					],
					"name": "create",
					"outputs": [
						{
							"internalType": "uint256",
							"name": "",
							"type": "uint256"
						}
					],
					"stateMutability": "nonpayable",
					"type": "function"
				},
				{
					"inputs": [
						{
							"internalType": "uint256",
							"name": "_id",
							"type": "uint256"
						}
					],
					"name": "donate",
					"outputs": [],
					"stateMutability": "payable",
					"type": "function"
				},
				{
					"inputs": [
						{
							"internalType": "uint256",
							"name": "_id",
							"type": "uint256"
						}
					],
					"name": "getDonators",
					"outputs": [
						{
							"internalType": "address[]",
							"name": "",
							"type": "address[]"
						},
						{
							"internalType": "uint256[]",
							"name": "",
							"type": "uint256[]"
						}
					],
					"stateMutability": "view",
					"type": "function"
				},
				{
					"inputs": [],
					"name": "getProjects",
					"outputs": [
						{
							"components": [
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"internalType": "string",
									"name": "title",
									"type": "string"
								},
								{
									"internalType": "string",
									"name": "description",
									"type": "string"
								},
								{
									"internalType": "uint256",
									"name": "target",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "deadline",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "collected",
									"type": "uint256"
								},
								{
									"internalType": "string",
									"name": "image",
									"type": "string"
								},
								{
									"internalType": "address[]",
									"name": "donators",
									"type": "address[]"
								},
								{
									"internalType": "uint256[]",
									"name": "donations",
									"type": "uint256[]"
								}
							],
							"internalType": "struct CrowdFunding.Project[]",
							"name": "",
							"type": "tuple[]"
						}
					],
					"stateMutability": "view",
					"type": "function"
				},
				{
					"inputs": [],
					"name": "numberOfProjects",
					"outputs": [
						{
							"internalType": "uint256",
							"name": "",
							"type": "uint256"
						}
					],
					"stateMutability": "view",
					"type": "function"
				},
				{
					"inputs": [
						{
							"internalType": "uint256",
							"name": "",
							"type": "uint256"
						}
					],
					"name": "projects",
					"outputs": [
						{
							"internalType": "address",
							"name": "owner",
							"type": "address"
						},
						{
							"internalType": "string",
							"name": "title",
							"type": "string"
						},
						{
							"internalType": "string",
							"name": "description",
							"type": "string"
						},
						{
							"internalType": "uint256",
							"name": "target",
							"type": "uint256"
						},
						{
							"internalType": "uint256",
							"name": "deadline",
							"type": "uint256"
						},
						{
							"internalType": "uint256",
							"name": "collected",
							"type": "uint256"
						},
						{
							"internalType": "string",
							"name": "image",
							"type": "string"
						}
					],
					"stateMutability": "view",
					"type": "function"
				}
			];
			const Address = "0x3c45575560E196Fa12fe4Bf39d42DbeaC1aaDEaE"; // Taking Address from Remix 
			window.web3 = await new Web3(window.ethereum);
			window.contract = await new window.web3.eth.Contract(ABI, Address);
			document.getElementById("contractArea").innerHTML = "Connected to Contract"; // calling the elementID above
		}
		connectMetamask();
		connectContract();

		const createProject = (title, description, target, deadline, image) => {
			const data = window.contract.methods.create(account, title, description, target, deadline, image).send({ from: account }).then((result) => {
				console.log(result);
			});
		}


		const getContractAccount = async () => {
			const data = await window.contract.methods.getProjects().call();
			document.getElementById("contractAccount").innerHTML = `Contract Account: ${data}`;
			console.log(new Date().getTime());
		}

		const getBalanceApple = () => { // const getBalanceApple is the HTML function & .contract.getBalance is the smart contract function
			const data = window.contract.methods.donate(0).send({ from: account, value: 500000000000000000 }).then(result => {
				console.log(result)
			});
			document.getElementById("balanceArea").innerHTML = `Contract Balance: ${data}`;
		}

		const depositContract = async () => {
			const amount = document.getElementById("depositInput").value;
			await window.contract.methods.deposit().send({ from: account, value: amount });
		}

		const withdraw = async () => {
			const amount = document.getElementById("amountInput").value;
			const address = document.getElementById("addressInput").value;
			await window.contract.methods.withdraw(address, amount).send({ from: account });
		}

	</script>

</body>

</html>